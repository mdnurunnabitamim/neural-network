# -*- coding: utf-8 -*-
"""Heart-Disease-Prediction-ANN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-wYzUHSNAjwKqKc8DZj01bmGC25nnUij
"""

#Importing Libraries
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
import pandas as pd
import seaborn as sb
from pylab import rcParams
import matplotlib.pyplot as plt
from matplotlib import rc
from google.colab import drive
from sklearn.model_selection import train_test_split
print('Libraries Imported')

drive.mount("/content/drive", force_remount=True)
data_csv_path = "/content/drive/My Drive/Colab Notebooks/HDP.csv"
data = pd.read_csv(data_csv_path)
data.head(14)

# print the shape and data type of the dataframe
print(data.shape)
print(data.dtypes)

#Plotting a paricular column
data['BP'].plot(figsize=(6,3), grid=True)
data['Max HR'].plot(figsize=(6,3), grid=True)



# print data characteristics, usings pandas built-in describe() function
data.describe()

X = np.array(data.drop(['Outcome'], 1))
y = np.array(data['Outcome'])

# create X and Y datasets for training
from sklearn import model_selection
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
from keras.layers import Dropout
from keras import regularizers

def create_binary_model():
    # create model
    model = Sequential()
    model.add(Dense(16, input_dim=13, activation='relu'))
    model.add(Dense(13, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))
    
    # Compile model
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

model = create_binary_model()

print(model.summary())

# fit the model to the training data
history=model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=200, batch_size=8)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
# Model accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'])
plt.show()

result = model.evaluate(X_test, y_test, batch_size=10) 
print('Test score (Accuracy):', result[1])